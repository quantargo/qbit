% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/invoke.R
\name{invoke}
\alias{invoke}
\title{Invoke QBit}
\usage{
invoke(
  qbit_id,
  event_type,
  event_input = NULL,
  stateful = FALSE,
  apikey = getOption("QKEY"),
  verbose = getOption("verbose")
)
}
\arguments{
\item{qbit_id}{character; Name of the QBit function.}

\item{event_type}{character; Event type to be used. Can be one of the following:
\itemize{
\item qbit-run: Run selected code in qbit.
\item qbit-fork: Create a new QBit from template
\item qbit-remove: Remove QBit
\item qbit-render: Render markdown document.
\item qbit-packages-install: Install packages in qbit
\item qbit-packages-remove: Remove packages from QBit
\item qbit-fetch-result: Fetch result from QBit
\item state-reset: Remove console outputs from QBit
\item qbit-update-state
\item qbit-download-workspace
\item upload-request
\item upload-finished
\item file-delete
}}

\item{event_input}{list;}

\item{stateful}{logical;}

\item{apikey}{character; API Key used to invoke QBit API endpoint.
After creating an account at \url{https://www.quantargo.com} the API key
is available
in the user settings \url{https://www.quantargo.com/dashboard}.}

\item{verbose}{logical; Show intermediary console outputs.}
}
\description{
QBit workspaces can be completely controlled via API including not only code
executions but also tasks like file upload/download, workspace export, etc.
Note, that this function is intended for internal use only.
}
\examples{
\dontrun{
  options(QKEY = "<YOUR-API-KEY>")
  qbit:::invoke("qbit-template-r-base", "qbit-run", list(code = "1+1"))
  qbitnew <- qbit:::invoke("qbit-template-r-base", "qbit-fork",
  list(qbitId = "qbit-template-r-base", qbitName = "TEST QBit"))
  qbit:::invoke(qbitnew$newQbitId, "qbit-run", list(code = "1+1"))
  qbit:::invoke(qbitnew$newQbitId, "qbit-remove", list(qbitId = qbitnew$newQbitId))
  qbitnew$newQbitId
}
}
