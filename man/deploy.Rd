% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/deploy.R
\name{deploy}
\alias{deploy}
\title{Deploy qbit}
\usage{
deploy(
  name,
  main_file,
  files = NULL,
  index = NULL,
  meta = NULL,
  source_main_file = TRUE,
  eval_env = .GlobalEnv,
  obj = ls(envir = eval_env),
  timeout = 60,
  package_lock = "renv.lock",
  packagesLoaded = dependencies()$Package,
  apikey = getOption("QKEY"),
  usagePlan = "public",
  url = getOption("QBITURL", "https://api.quantargo.com/lambda"),
  verbose = getOption("verbose"),
  tmpdir = tempdir()
)
}
\arguments{
\item{name}{character; Name of the QBit function.}

\item{main_file}{character; Main file (either main.R or main.Rmd) to be used
for QBit.}

\item{files}{character; Files to be part of Qbit}

\item{index}{list; Index meta data for qbit}

\item{meta}{list; Meta data of the QBit object.}

\item{source_main_file}{character; Specify if file shall be sourced before uploading.
This setting can be helpful to create the required environment.}

\item{eval_env}{environment; Environment from which objects shall be taken}

\item{obj}{character; Names of objects to be included into qbit environment}

\item{timeout}{numeric; QBit timeout in seconds.}

\item{package_lock}{character; Package lock file}

\item{packagesLoaded}{character; Packages namespaces to be loaded (through library)}

\item{apikey}{character; API Key to be used for QBit deployment endpoint.}

\item{usagePlan}{character; Usage plan of Qbit, can be either either public or private}

\item{url}{character; Upload url to be used}

\item{verbose}{logical; Specify if output shall be shown}

\item{tmpdir}{character; Temporary directory to be used for qbit/zip creation.}
}
\description{
Deploy qbit
}
\examples{
\dontrun{
  deploy('qbit-example-landing-page', main_file = 'main.R')
  deploy("qbit-tidymodels-model-selection-used-cars",
         main_file = "main.Rmd",
         files = c("README.md",
                   "dt_tuned.rds",
                   "rf_tuned.rds",
                   "audi.csv"),
         index = yaml::read_yaml("index.yml"),
         meta = list(type="qbit"),
         timeout = 300)
}
}
